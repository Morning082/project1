Git是一种***分布式***的版本管理工具！
所谓分布式：是指仓库文件可以存储在任意的位置（磁盘，U盘，网络）

还有一个特点：在使用中不需要网络支持，直接在本地就可以进行任何的版本控制操作（如果要推送/同步到服务器上保存还得联网）

其它（SVN, CVS, VSS）这些都是集中式！
所谓集中式：所有的操作都必须依赖于一台中央服务器执行所有的版本控制（所有操作必须要联网）

安全、高效

----------------------------------------------------------------------------------------------------

Git的设计不同于一般版本控制工具，它分为三个操作阶段：
工作区  正在编辑
暂存区  即将提交（对要提交的进行镜像、索引和比对）
仓库区  正式托管（所有的版本操作——分支、回滚、发布，都由最终的仓库代码作为操作对象）

因此，Git的代码提交必须要经过两个步骤：
先从工作区加入暂存区
再从暂存区提交仓库区

----------------------------------------------------------------------------------------------------

所有的Git操作都必须位于一个仓库目录下（将你的项目目录初始化为一个Git仓库）
git init

可以通过dir /ah查看仓库的隐藏目录.git

注册仓库提交人的姓名和联系方式（在版本协作中，相互之间的代码需要进行追溯时，可知是谁的代码，以及出现问题如何联系）

这个身份还有两种作用域：
1、只对当前仓库的有效（一定要位于仓库目录下去操作）
    git config user.name "tom"
    git config user.email "tom@163.com"

2、对本机所有仓库都有效（可以位于任意目录位置去操作）
    git config --global user.name "sam"
    git config --global user.email "sam@sohu.com"

----------------------------------------------------------------------------------------------------

基本命令

查看git命令的帮助
git config --help
git help config

查看工作区的状态
git status

红色的文件表明正在编辑尚未被暂存的文件
绿色的文件表明已经暂存可以被提交的文件

加入暂存区
git add readme.txt                          指明暂存文件
git add a.htm b.htm sub/                    指明多个暂存文件
git add . === git add -A === git add --all  所有未被暂存的文件和目录全部被暂存

有些文件是临时文件、编译后产生的文件、nodejs中的一些第三方组件（node_modules目录），或者不期望被托管的文件（自己的个人文件），这些文件都是不需要加入仓库与别人共享的
可以在仓库的根目录下，创建一个忽略列表文件，将所有不需要被暂存的文件和目录罗列在列表中
.gitignore

提交仓库区
git commit -m "init project"

这时再通过git status会被告知nothing to commit, working tree clean（因为所有内容已经被同步到仓库，没有内容需要提交）

-------------------------------------------------------------------------------------------------------------------

查看提交日志/历史（通过q退出浏览）
git log

查看最近一次提交
git log -1

查看最近三次提交
git log -3

查看某个时间点之前
git log --before "Tue Dec 24 11:35:00 2019 +0800"

查看某个时间点之后
git log --after "Tue Dec 24 11:35:00 2019 +0800"

查看某个时间段之间
git log --after "Tue Dec 24 11:35:00 2019 +0800" --before "Tue Dec 24 11:40:00 2019 +0800" 

查看指定用户的提交信息
git log --author "tom"

单行的精简模式（只有提交id和msg）
git log --oneline

-------------------------------------------------------------------------------------------------------------------

三个阶段之间的文件比较
仓库区：<hr />
暂存区：<hr color="red" />
工作区：<hr color="blue" />

比较工作区和暂存区
git diff a.htm

比较暂存区和仓库区
git diff --cached a.htm

比较工作区和仓库区
git diff head a.htm

两个区之间两两比较不同的内容（相同的内容不会出现），会用两种颜色区分：
红色是距离你相对远的那个区
绿色是距离你相对近的那个区

-------------------------------------------------------------------------------------------------------------------

做了文件重命名、删除，git会自动识别
只要重新加暂存，再次提交即可

-------------------------------------------------------------------------------------------------------------------

版本恢复

1、误删文件
先通过git log确定文件在哪一个提交点时还存在
再通过git checkout e905d2 -- b.htm

2、某个文件在工作区发现改错了或者编辑有问题，想恢复到仓库区的最新版本
git checkout -- a.html

3、好多文件都编辑有问题，想恢复整个工作区到仓库区的最新
git reset --hard

4、最近的几次提交都有问题，需要恢复到之前的某个提交点
git reset --hard 747ea1a

注意：这时如果通过git log查看，不会看见当前恢复点以后的信息！

5、通过git reflog可以查看当前分支上所有的操作历史（包括你曾经的回溯）

6、想在当前时间戳再往后恢复
先通过git reflog查看历来所有日志时间戳
然后再git reset --hard 9f5f18b

